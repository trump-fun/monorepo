// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Entity,
  Value,
  ValueKind,
  store,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Pool | null {
    return changetype<Pool | null>(store.get_in_block("Pool", id));
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolIntId(): BigInt {
    const value = this.get("poolIntId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set poolIntId(value: BigInt) {
    this.set("poolIntId", Value.fromBigInt(value));
  }

  get question(): string {
    const value = this.get("question");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set question(value: string) {
    this.set("question", Value.fromString(value));
  }

  get options(): Array<string> {
    const value = this.get("options");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set options(value: Array<string>) {
    this.set("options", Value.fromStringArray(value));
  }

  get betsCloseAt(): BigInt {
    const value = this.get("betsCloseAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set betsCloseAt(value: BigInt) {
    this.set("betsCloseAt", Value.fromBigInt(value));
  }

  get decisionTime(): BigInt {
    const value = this.get("decisionTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set decisionTime(value: BigInt) {
    this.set("decisionTime", Value.fromBigInt(value));
  }

  get usdcBetTotalsByOption(): Array<BigInt> {
    const value = this.get("usdcBetTotalsByOption");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set usdcBetTotalsByOption(value: Array<BigInt>) {
    this.set("usdcBetTotalsByOption", Value.fromBigIntArray(value));
  }

  get pointsBetTotalsByOption(): Array<BigInt> {
    const value = this.get("pointsBetTotalsByOption");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set pointsBetTotalsByOption(value: Array<BigInt>) {
    this.set("pointsBetTotalsByOption", Value.fromBigIntArray(value));
  }

  get winningOption(): BigInt {
    const value = this.get("winningOption");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set winningOption(value: BigInt) {
    this.set("winningOption", Value.fromBigInt(value));
  }

  get status(): string {
    const value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get isDraw(): boolean {
    const value = this.get("isDraw");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isDraw(value: boolean) {
    this.set("isDraw", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    const value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get category(): string {
    const value = this.get("category");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get creatorName(): string {
    const value = this.get("creatorName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creatorName(value: string) {
    this.set("creatorName", Value.fromString(value));
  }

  get creatorId(): string {
    const value = this.get("creatorId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creatorId(value: string) {
    this.set("creatorId", Value.fromString(value));
  }

  get closureCriteria(): string {
    const value = this.get("closureCriteria");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set closureCriteria(value: string) {
    this.set("closureCriteria", Value.fromString(value));
  }

  get closureInstructions(): string {
    const value = this.get("closureInstructions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set closureInstructions(value: string) {
    this.set("closureInstructions", Value.fromString(value));
  }

  get mediaUrl(): string {
    const value = this.get("mediaUrl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mediaUrl(value: string) {
    this.set("mediaUrl", Value.fromString(value));
  }

  get mediaType(): string {
    const value = this.get("mediaType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mediaType(value: string) {
    this.set("mediaType", Value.fromString(value));
  }

  get twitterPostId(): string {
    const value = this.get("twitterPostId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set twitterPostId(value: string) {
    this.set("twitterPostId", Value.fromString(value));
  }

  get creationTxHash(): string {
    const value = this.get("creationTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creationTxHash(value: string) {
    this.set("creationTxHash", Value.fromString(value));
  }
}

export class Bet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save Bet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Bet", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Bet | null {
    return changetype<Bet | null>(store.get_in_block("Bet", id));
  }

  static load(id: string): Bet | null {
    return changetype<Bet | null>(store.get("Bet", id));
  }

  get id(): string {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get betIntId(): BigInt {
    const value = this.get("betIntId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set betIntId(value: BigInt) {
    this.set("betIntId", Value.fromBigInt(value));
  }

  get poolIntId(): BigInt {
    const value = this.get("poolIntId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set poolIntId(value: BigInt) {
    this.set("poolIntId", Value.fromBigInt(value));
  }

  get pool(): string {
    const value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get userAddress(): string {
    const value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get optionIndex(): BigInt {
    const value = this.get("optionIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set optionIndex(value: BigInt) {
    this.set("optionIndex", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    const value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    const value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get isPayedOut(): boolean {
    const value = this.get("isPayedOut");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isPayedOut(value: boolean) {
    this.set("isPayedOut", Value.fromBoolean(value));
  }

  get outcome(): string {
    const value = this.get("outcome");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set outcome(value: string) {
    this.set("outcome", Value.fromString(value));
  }

  get tokenType(): string {
    const value = this.get("tokenType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenType(value: string) {
    this.set("tokenType", Value.fromString(value));
  }

  get txHash(): string {
    const value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }
}

export class PoolCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save PoolCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolCreated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolCreated | null {
    return changetype<PoolCreated | null>(
      store.get_in_block("PoolCreated", id),
    );
  }

  static load(id: string): PoolCreated | null {
    return changetype<PoolCreated | null>(store.get("PoolCreated", id));
  }

  get id(): string {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    const value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get poolId(): BigInt {
    const value = this.get("poolId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set poolId(value: BigInt) {
    this.set("poolId", Value.fromBigInt(value));
  }

  get question(): string {
    const value = this.get("question");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set question(value: string) {
    this.set("question", Value.fromString(value));
  }

  get options(): Array<string> {
    const value = this.get("options");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set options(value: Array<string>) {
    this.set("options", Value.fromStringArray(value));
  }

  get betsCloseAt(): BigInt {
    const value = this.get("betsCloseAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set betsCloseAt(value: BigInt) {
    this.set("betsCloseAt", Value.fromBigInt(value));
  }

  get mediaUrl(): string {
    const value = this.get("mediaUrl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mediaUrl(value: string) {
    this.set("mediaUrl", Value.fromString(value));
  }

  get mediaType(): string {
    const value = this.get("mediaType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mediaType(value: string) {
    this.set("mediaType", Value.fromString(value));
  }

  get category(): string {
    const value = this.get("category");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get creatorName(): string {
    const value = this.get("creatorName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creatorName(value: string) {
    this.set("creatorName", Value.fromString(value));
  }

  get creatorId(): string {
    const value = this.get("creatorId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creatorId(value: string) {
    this.set("creatorId", Value.fromString(value));
  }

  get closureCriteria(): string {
    const value = this.get("closureCriteria");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set closureCriteria(value: string) {
    this.set("closureCriteria", Value.fromString(value));
  }

  get closureInstructions(): string {
    const value = this.get("closureInstructions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set closureInstructions(value: string) {
    this.set("closureInstructions", Value.fromString(value));
  }

  get createdAt(): BigInt {
    const value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class BetPlaced extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save BetPlaced entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BetPlaced must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BetPlaced", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BetPlaced | null {
    return changetype<BetPlaced | null>(store.get_in_block("BetPlaced", id));
  }

  static load(id: string): BetPlaced | null {
    return changetype<BetPlaced | null>(store.get("BetPlaced", id));
  }

  get id(): string {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get betId(): BigInt {
    const value = this.get("betId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set betId(value: BigInt) {
    this.set("betId", Value.fromBigInt(value));
  }

  get poolId(): BigInt {
    const value = this.get("poolId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set poolId(value: BigInt) {
    this.set("poolId", Value.fromBigInt(value));
  }

  get user(): string {
    const value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get optionIndex(): BigInt {
    const value = this.get("optionIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set optionIndex(value: BigInt) {
    this.set("optionIndex", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    const value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get tokenType(): string {
    const value = this.get("tokenType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenType(value: string) {
    this.set("tokenType", Value.fromString(value));
  }

  get createdAt(): BigInt {
    const value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get txHash(): string {
    const value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get bet(): string {
    const value = this.get("bet");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bet(value: string) {
    this.set("bet", Value.fromString(value));
  }

  get pool(): string {
    const value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class PoolMediaSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save PoolMediaSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolMediaSet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolMediaSet", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolMediaSet | null {
    return changetype<PoolMediaSet | null>(
      store.get_in_block("PoolMediaSet", id),
    );
  }

  static load(id: string): PoolMediaSet | null {
    return changetype<PoolMediaSet | null>(store.get("PoolMediaSet", id));
  }

  get id(): string {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): BigInt {
    const value = this.get("poolId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set poolId(value: BigInt) {
    this.set("poolId", Value.fromBigInt(value));
  }

  get mediaUrl(): string {
    const value = this.get("mediaUrl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mediaUrl(value: string) {
    this.set("mediaUrl", Value.fromString(value));
  }

  get mediaType(): string {
    const value = this.get("mediaType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mediaType(value: string) {
    this.set("mediaType", Value.fromString(value));
  }

  get txHash(): string {
    const value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get pool(): string {
    const value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class PayoutClaimed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save PayoutClaimed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PayoutClaimed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PayoutClaimed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PayoutClaimed | null {
    return changetype<PayoutClaimed | null>(
      store.get_in_block("PayoutClaimed", id),
    );
  }

  static load(id: string): PayoutClaimed | null {
    return changetype<PayoutClaimed | null>(store.get("PayoutClaimed", id));
  }

  get id(): string {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    const value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get betId(): BigInt {
    const value = this.get("betId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set betId(value: BigInt) {
    this.set("betId", Value.fromBigInt(value));
  }

  get poolId(): BigInt {
    const value = this.get("poolId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set poolId(value: BigInt) {
    this.set("poolId", Value.fromBigInt(value));
  }

  get user(): string {
    const value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amount(): BigInt {
    const value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get tokenType(): string {
    const value = this.get("tokenType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenType(value: string) {
    this.set("tokenType", Value.fromString(value));
  }
}

export class PoolClosed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save PoolClosed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolClosed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolClosed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolClosed | null {
    return changetype<PoolClosed | null>(store.get_in_block("PoolClosed", id));
  }

  static load(id: string): PoolClosed | null {
    return changetype<PoolClosed | null>(store.get("PoolClosed", id));
  }

  get id(): string {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    const value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get poolId(): BigInt {
    const value = this.get("poolId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set poolId(value: BigInt) {
    this.set("poolId", Value.fromBigInt(value));
  }

  get selectedOption(): BigInt {
    const value = this.get("selectedOption");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set selectedOption(value: BigInt) {
    this.set("selectedOption", Value.fromBigInt(value));
  }

  get decisionTime(): BigInt {
    const value = this.get("decisionTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set decisionTime(value: BigInt) {
    this.set("decisionTime", Value.fromBigInt(value));
  }
}

// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from 'as-proto/assembly';
import { TokenTypeEnum } from './TokenTypeEnum';

export class BetPlaced_Event {
  static encode(message: BetPlaced_Event, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.trxHash);

    writer.uint32(16);
    writer.uint64(message.betId);

    writer.uint32(24);
    writer.uint64(message.poolId);

    writer.uint32(34);
    writer.string(message.user);

    writer.uint32(40);
    writer.uint64(message.optionIndex);

    writer.uint32(48);
    writer.uint64(message.amount);

    writer.uint32(56);
    writer.int32(message.tokenType);

    writer.uint32(64);
    writer.int64(message.createdAt);
  }

  static decode(reader: Reader, length: i32): BetPlaced_Event {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BetPlaced_Event();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.trxHash = reader.string();
          break;

        case 2:
          message.betId = reader.uint64();
          break;

        case 3:
          message.poolId = reader.uint64();
          break;

        case 4:
          message.user = reader.string();
          break;

        case 5:
          message.optionIndex = reader.uint64();
          break;

        case 6:
          message.amount = reader.uint64();
          break;

        case 7:
          message.tokenType = reader.int32();
          break;

        case 8:
          message.createdAt = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  trxHash: string;
  betId: u64;
  poolId: u64;
  user: string;
  optionIndex: u64;
  amount: u64;
  tokenType: TokenTypeEnum;
  createdAt: i64;

  constructor(
    trxHash: string = '',
    betId: u64 = 0,
    poolId: u64 = 0,
    user: string = '',
    optionIndex: u64 = 0,
    amount: u64 = 0,
    tokenType: TokenTypeEnum = 0,
    createdAt: i64 = 0
  ) {
    this.trxHash = trxHash;
    this.betId = betId;
    this.poolId = poolId;
    this.user = user;
    this.optionIndex = optionIndex;
    this.amount = amount;
    this.tokenType = tokenType;
    this.createdAt = createdAt;
  }
}

// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from 'as-proto/assembly';
import { BetPlaced_Event } from './BetPlaced_Event';
import { PayoutClaimed_Event } from './PayoutClaimed_Event';
import { PoolClosed_Event } from './PoolClosed_Event';
import { PoolCreated_Event } from './PoolCreated_Event';
import { PoolImageSet_Event } from './PoolImageSet_Event';
import { ClaimPayout_Instruction } from './ClaimPayout_Instruction';
import { CreatePool_Instruction } from './CreatePool_Instruction';
import { GradeBet_Instruction } from './GradeBet_Instruction';
import { Initialize_Instruction } from './Initialize_Instruction';
import { PlaceBet_Instruction } from './PlaceBet_Instruction';
import { SetImage_Instruction } from './SetImage_Instruction';

export class Data {
  static encode(message: Data, writer: Writer): void {
    const betPlacedEventList = message.betPlacedEventList;
    for (let i: i32 = 0; i < betPlacedEventList.length; ++i) {
      writer.uint32(10);
      writer.fork();
      BetPlaced_Event.encode(betPlacedEventList[i], writer);
      writer.ldelim();
    }

    const payoutClaimedEventList = message.payoutClaimedEventList;
    for (let i: i32 = 0; i < payoutClaimedEventList.length; ++i) {
      writer.uint32(18);
      writer.fork();
      PayoutClaimed_Event.encode(payoutClaimedEventList[i], writer);
      writer.ldelim();
    }

    const poolClosedEventList = message.poolClosedEventList;
    for (let i: i32 = 0; i < poolClosedEventList.length; ++i) {
      writer.uint32(26);
      writer.fork();
      PoolClosed_Event.encode(poolClosedEventList[i], writer);
      writer.ldelim();
    }

    const poolCreatedEventList = message.poolCreatedEventList;
    for (let i: i32 = 0; i < poolCreatedEventList.length; ++i) {
      writer.uint32(34);
      writer.fork();
      PoolCreated_Event.encode(poolCreatedEventList[i], writer);
      writer.ldelim();
    }

    const poolImageSetEventList = message.poolImageSetEventList;
    for (let i: i32 = 0; i < poolImageSetEventList.length; ++i) {
      writer.uint32(42);
      writer.fork();
      PoolImageSet_Event.encode(poolImageSetEventList[i], writer);
      writer.ldelim();
    }

    const claimPayoutInstructionList = message.claimPayoutInstructionList;
    for (let i: i32 = 0; i < claimPayoutInstructionList.length; ++i) {
      writer.uint32(50);
      writer.fork();
      ClaimPayout_Instruction.encode(claimPayoutInstructionList[i], writer);
      writer.ldelim();
    }

    const createPoolInstructionList = message.createPoolInstructionList;
    for (let i: i32 = 0; i < createPoolInstructionList.length; ++i) {
      writer.uint32(58);
      writer.fork();
      CreatePool_Instruction.encode(createPoolInstructionList[i], writer);
      writer.ldelim();
    }

    const gradeBetInstructionList = message.gradeBetInstructionList;
    for (let i: i32 = 0; i < gradeBetInstructionList.length; ++i) {
      writer.uint32(66);
      writer.fork();
      GradeBet_Instruction.encode(gradeBetInstructionList[i], writer);
      writer.ldelim();
    }

    const initializeInstructionList = message.initializeInstructionList;
    for (let i: i32 = 0; i < initializeInstructionList.length; ++i) {
      writer.uint32(74);
      writer.fork();
      Initialize_Instruction.encode(initializeInstructionList[i], writer);
      writer.ldelim();
    }

    const placeBetInstructionList = message.placeBetInstructionList;
    for (let i: i32 = 0; i < placeBetInstructionList.length; ++i) {
      writer.uint32(82);
      writer.fork();
      PlaceBet_Instruction.encode(placeBetInstructionList[i], writer);
      writer.ldelim();
    }

    const setImageInstructionList = message.setImageInstructionList;
    for (let i: i32 = 0; i < setImageInstructionList.length; ++i) {
      writer.uint32(90);
      writer.fork();
      SetImage_Instruction.encode(setImageInstructionList[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Data {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Data();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.betPlacedEventList.push(BetPlaced_Event.decode(reader, reader.uint32()));
          break;

        case 2:
          message.payoutClaimedEventList.push(PayoutClaimed_Event.decode(reader, reader.uint32()));
          break;

        case 3:
          message.poolClosedEventList.push(PoolClosed_Event.decode(reader, reader.uint32()));
          break;

        case 4:
          message.poolCreatedEventList.push(PoolCreated_Event.decode(reader, reader.uint32()));
          break;

        case 5:
          message.poolImageSetEventList.push(PoolImageSet_Event.decode(reader, reader.uint32()));
          break;

        case 6:
          message.claimPayoutInstructionList.push(
            ClaimPayout_Instruction.decode(reader, reader.uint32())
          );
          break;

        case 7:
          message.createPoolInstructionList.push(
            CreatePool_Instruction.decode(reader, reader.uint32())
          );
          break;

        case 8:
          message.gradeBetInstructionList.push(
            GradeBet_Instruction.decode(reader, reader.uint32())
          );
          break;

        case 9:
          message.initializeInstructionList.push(
            Initialize_Instruction.decode(reader, reader.uint32())
          );
          break;

        case 10:
          message.placeBetInstructionList.push(
            PlaceBet_Instruction.decode(reader, reader.uint32())
          );
          break;

        case 11:
          message.setImageInstructionList.push(
            SetImage_Instruction.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  betPlacedEventList: Array<BetPlaced_Event>;
  payoutClaimedEventList: Array<PayoutClaimed_Event>;
  poolClosedEventList: Array<PoolClosed_Event>;
  poolCreatedEventList: Array<PoolCreated_Event>;
  poolImageSetEventList: Array<PoolImageSet_Event>;
  claimPayoutInstructionList: Array<ClaimPayout_Instruction>;
  createPoolInstructionList: Array<CreatePool_Instruction>;
  gradeBetInstructionList: Array<GradeBet_Instruction>;
  initializeInstructionList: Array<Initialize_Instruction>;
  placeBetInstructionList: Array<PlaceBet_Instruction>;
  setImageInstructionList: Array<SetImage_Instruction>;

  constructor(
    betPlacedEventList: Array<BetPlaced_Event> = [],
    payoutClaimedEventList: Array<PayoutClaimed_Event> = [],
    poolClosedEventList: Array<PoolClosed_Event> = [],
    poolCreatedEventList: Array<PoolCreated_Event> = [],
    poolImageSetEventList: Array<PoolImageSet_Event> = [],
    claimPayoutInstructionList: Array<ClaimPayout_Instruction> = [],
    createPoolInstructionList: Array<CreatePool_Instruction> = [],
    gradeBetInstructionList: Array<GradeBet_Instruction> = [],
    initializeInstructionList: Array<Initialize_Instruction> = [],
    placeBetInstructionList: Array<PlaceBet_Instruction> = [],
    setImageInstructionList: Array<SetImage_Instruction> = []
  ) {
    this.betPlacedEventList = betPlacedEventList;
    this.payoutClaimedEventList = payoutClaimedEventList;
    this.poolClosedEventList = poolClosedEventList;
    this.poolCreatedEventList = poolCreatedEventList;
    this.poolImageSetEventList = poolImageSetEventList;
    this.claimPayoutInstructionList = claimPayoutInstructionList;
    this.createPoolInstructionList = createPoolInstructionList;
    this.gradeBetInstructionList = gradeBetInstructionList;
    this.initializeInstructionList = initializeInstructionList;
    this.placeBetInstructionList = placeBetInstructionList;
    this.setImageInstructionList = setImageInstructionList;
  }
}
